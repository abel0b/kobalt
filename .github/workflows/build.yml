name: build

on:
  push:
    branches: [ master, develop ]
  pull_request:
    branches: [ master, develop ]
  workflow_dispatch:
    inputs:
      config:
        description: Configuration
        required: true
        default: release
      debug_logs:
        description: Enable debug logging
        required: false
        default:

env:
  CONFIG: release

jobs:
  build-unix:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-20.04, macos-10.15]
        cc: [clang]
        include:
          - os: ubuntu-20.04
            osname: linux
          - os: macos-10.15
            osname: macos

    steps:
      - uses: actions/checkout@v2

      - name: Install Lua
        uses: abel0b/setup-lua@v1
        with:
          lua-version: "5.3.5"

      - name: Install premake
        uses: abel0b/setup-premake@v1

      - name: Configure workflow
        if: github.event_name == 'workflow_dispatch'
        run: |
          for log in ${{ github.event.inputs.debug_logs }}; do echo "DEBUG_$log=1" >> $GITHUB_ENV; done
          echo  "CONFIG=${{ github.event.inputs.config }}" >> $GITHUB_ENV

      - name: Generate project file
        run: premake5 gmake2
      
      - name: Compile
        run: make -j$(nproc) CC=${{ matrix.cc }} config=$CONFIG

      - name: Say hello world
        run: ./bin/$CONFIG/kobalt doc/examples/hello_world.kl

      - name: Create release archive
        run: premake5 release

      - name: Upload release archive
        if: github.event_name == 'push' && github.ref == 'refs/heads/master'
        uses: actions/upload-artifact@v2
        with:
          name: kobalt-${{ matrix.osname }}
          path: dist/kobalt-${{ matrix.osname }}.tar.gz


  build-windows:
    runs-on: windows-latest

    strategy:
      matrix:
        config: [release]
        cc: [cl]

    steps:
      - uses: actions/checkout@v2

      - name: Install Lua
        uses: abel0b/setup-lua@v1
        with:
          lua-version: "5.3.5"

      - name: Install premake
        uses: abel0b/setup-premake@v1

      - name: Configure workflow
        if: github.event_name == 'workflow_dispatch'
        run: |
          foreach($log in "${{ github.event.inputs.debug_logs }}".split(" ")) { echo "DEBUG_$log=1" >> $env:GITHUB_ENV }
          echo  "CONFIG=${{ github.event.inputs.config }}" >> $env:GITHUB_ENV

      - name: Generate project file
        run: premake5 vs2019

      - name: Compile
        run: |
          .\tools\vsenv.ps1
          msbuild kobalt.sln -m -p:CLToolExe=${{ matrix.cc }} -p:Configuration=$env:CONFIG

      - name: Say hello world
        run: |
          .\tools\vsenv.ps1
          & ".\bin\$env:CONFIG\kobalt" doc\examples\hello_world.kl

      - name: Create release archive
        run: premake5 release

      - name: Upload release archive
        if: github.event_name == 'push' && github.ref == 'refs/heads/master'
        uses: actions/upload-artifact@v2
        with:
          name: kobalt-windows
          path: dist/kobalt-windows.zip

  release:
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    
    needs: [release-unix, release-windows]

    runs-on: ubuntu-20.04

    if: github.ref == 'refs/heads/master'
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v2
      
      - uses: actions/download-artifact@v2
        with:
          name: kobalt-linux
      
      - uses: actions/download-artifact@v2
        with:
          name: kobalt-macos
      
      - uses: actions/download-artifact@v2
        with:
          name: kobalt-windows

      - name: Generate release notes
        run: if [[ -f ./doc/changelog/$(git describe --tags --abbrev=0 HEAD).md ]]; then cp ./doc/changelog/$(git describe --tags --abbrev=0 HEAD) .md release_notes.md; else git describe --tags --abbrev=0 HEAD > release_notes.md; fi

      - name: Create Release
        run: |
          hub release create -p -a kobalt-linux.tar.gz -a kobalt-macos.tar.gz -a kobalt-windows.zip --file release_notes.md $(git describe --tags --abbrev=0 HEAD)
