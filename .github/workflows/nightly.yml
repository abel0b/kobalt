name: nightly

on:
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:

env:
  CONFIG: release

jobs:
  check:
    runs-on: ubuntu-20.04
    
    outputs:
      count-nightly: ${{ steps.count-nightly.outputs.value }}
   
    steps:
      - uses: actions/checkout@v2
      
      - name: Count commits since latest nightly build
        id: count-nightly
        run: if git rev-list nightly -n1; then echo "::set-output name=value::$(git rev-list nightly..HEAD --count)"; else echo "::set-output name=value::1"; fi

  build-unix:
    runs-on: ${{ matrix.os }}

    needs: check

    if: needs.check.outputs.count-nightly != '0'

    strategy:
      matrix:
        os: [ubuntu-20.04, macos-10.15]
        cc: [clang]
        include:
          - os: ubuntu-20.04
            osname: linux
          - os: macos-10.15
            osname: macos

    steps:
      - uses: actions/checkout@v2

      - name: Install Lua
        uses: abel0b/setup-lua@v1
        with:
          lua-version: "5.3.5"

      - name: Install premake
        uses: abel0b/setup-premake@v1

      - name: Configure workflow
        if: github.event_name == 'workflow_dispatch'
        run: |
          for log in ${{ github.event.inputs.debug_logs }}; do echo "DEBUG_$log=1" >> $GITHUB_ENV; done
          echo  "CONFIG=${{ github.event.inputs.config }}" >> $GITHUB_ENV

      - name: Generate project file
        run: premake5 gmake2
      
      - name: Compile
        run: make -j$(nproc) CC=${{ matrix.cc }} config=$CONFIG

      - name: Say hello world
        run: ./bin/$CONFIG/kobalt doc/examples/hello_world.kl

      - name: Create release archive
        run: premake5 release

      - name: Upload release archive
        uses: actions/upload-artifact@v2
        with:
          name: kobalt-${{ matrix.osname }}
          path: dist/kobalt-${{ matrix.osname }}.tar.gz


  build-windows:
    runs-on: windows-latest

    needs: check

    if: needs.check.outputs.count-nightly != '0'

    strategy:
      matrix:
        config: [release]
        cc: [cl]

    steps:
      - uses: actions/checkout@v2

      - name: Install Lua
        uses: abel0b/setup-lua@v1
        with:
          lua-version: "5.3.5"

      - name: Install premake
        uses: abel0b/setup-premake@v1

      - name: Configure workflow
        if: github.event_name == 'workflow_dispatch'
        run: |
          foreach($log in "${{ github.event.inputs.debug_logs }}".split(" ")) { echo "DEBUG_$log=1" >> $env:GITHUB_ENV }
          echo  "CONFIG=${{ github.event.inputs.config }}" >> $env:GITHUB_ENV

      - name: Generate project file
        run: premake5 vs2019

      - name: Compile
        run: |
          .\dev\vsenv.ps1
          msbuild kobalt.sln -m -p:CLToolExe=${{ matrix.cc }} -p:Configuration=$env:CONFIG

      - name: Say hello world
        run: |
          .\dev\vsenv.ps1
          & ".\bin\$env:CONFIG\kobalt" doc\examples\hello_world.kl

      - name: Create release archive
        run: premake5 release

      - name: Upload release archive
        uses: actions/upload-artifact@v2
        with:
          name: kobalt-windows
          path: dist/kobalt-windows.zip

  release:
    needs: [check, build-unix, build-windows]

    if: needs.check.outputs.count-nightly != '0'

    runs-on: ubuntu-20.04

    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - uses: actions/checkout@v2
      
      - uses: actions/download-artifact@v2
        with:
          name: kobalt-linux
      
      - uses: actions/download-artifact@v2
        with:
          name: kobalt-macos
      
      - uses: actions/download-artifact@v2
        with:
          name: kobalt-windows

      - name: Generate release notes
        run: |
          echo "Nightly build $(date "+%y.%m.%d")" > release_notes.md
          echo >> release_notes.md
          echo "This is the latest nightly build artifacts. This release is ahead of $(git describe --tags --abbrev=0) by $(git rev-list $(git describe --tags --abbrev=0)..HEAD --count) commits. Please note that this may be unstable." >> release_notes.md

      - name: Create Release
        run: |
          hub release delete nightly || true
          git tag -d nightly || true
          git push origin --delete nightly || true
          hub release create -p -a kobalt-linux.tar.gz -a kobalt-macos.tar.gz -a kobalt-windows.zip --file release_notes.md nightly
