Program <1:1>
  Import <1:1> = std
  Fun <1:1> :: (int) -> int
    Id <1:5> = fibo
    FunParams <1:10>
      FunParam <1:10>
        Id <1:11> = n
        Type <1:16> = "int"
    Type <1:24> = "int"
    Seq <1:28> :: int
      IfElse <2:5> :: int
        IfBranch <2:5>
          Call <2:9> :: int
            Id <2:9> = <=
            CallParams <2:11>
              CallParam <2:11>
                Id <2:11> = n :: int
              CallParam <2:13>
                IntLit <2:13> = 1 :: int
          Seq <2:18> :: int
            Id <3:9> = n :: int
        ElseBranch <4:8>
          Seq <4:8> :: int
            Call <5:9> :: int
              Id <5:9> = +
              CallParams <5:11>
                CallParam <5:11>
                  Call <5:12> :: int
                    Id <5:12> = fibo
                    CallParams <5:18>
                      CallParam <5:18>
                        Call <5:18> :: int
                          Id <5:18> = -
                          CallParams <5:20>
                            CallParam <5:20>
                              Id <5:20> = n :: int
                            CallParam <5:22>
                              IntLit <5:22> = 1 :: int
                CallParam <5:26>
                  Call <5:27> :: int
                    Id <5:27> = fibo
                    CallParams <5:33>
                      CallParam <5:33>
                        Call <5:33> :: int
                          Id <5:33> = -
                          CallParams <5:35>
                            CallParam <5:35>
                              Id <5:35> = n :: int
                            CallParam <5:37>
                              IntLit <5:37> = 2 :: int
  Call <7:1> :: ()
    Id <7:1> = printl
    CallParams <7:8>
      CallParam <7:8>
        StrLit <7:8> = "fibo 6 =" :: str
  Call <8:1> :: ()
    Id <8:1> = intprintl
    CallParams <8:11>
      CallParam <8:11>
        Call <8:12> :: int
          Id <8:12> = fibo
          CallParams <8:17>
            CallParam <8:17>
              IntLit <8:17> = 6 :: int
Program <1:1>
  Fun <1:1> :: (str) -> ()
    Id <1:5> = __c:puts
    FunParams <1:14>
      FunParam <1:14>
        Id <1:15> = s
        Type <1:20> = "str"
    Type <1:29> = "()"
  Fun <3:1> :: (char) -> ()
    Id <3:5> = __c:putchar
    FunParams <3:17>
      FunParam <3:17>
        Id <3:18> = c
        Type <3:23> = "char"
    Type <3:33> = "()"
  Fun <5:1> :: (()) -> ()
    Id <5:5> = __c:abort
    FunParams <5:16>
      FunParam <5:16>
        Id <5:16> = _
        Type <5:16> = "()"
    Type <5:19> = "()"
  Fun <7:1> :: (int) -> ()
    Id <7:5> = __c:exit
    FunParams <7:14>
      FunParam <7:14>
        Id <7:15> = status
        Type <7:25> = "int"
    Type <7:34> = "()"
  Fun <9:1> :: (str) -> int
    Id <9:5> = __c:strlen
    FunParams <9:16>
      FunParam <9:16>
        Id <9:17> = string
        Type <9:27> = "str"
    Type <9:35> = "int"
  Fun <11:1> :: (str str) -> str
    Id <11:5> = __c:strcpy
    FunParams <11:16>
      FunParam <11:16>
        Id <11:17> = dest
        Type <11:25> = "str"
      FunParam <11:30>
        Id <11:31> = src
        Type <11:38> = "str"
    Type <11:46> = "str"
  Fun <13:1> :: (str str int) -> str
    Id <13:5> = __c:strncpy
    FunParams <13:17>
      FunParam <13:17>
        Id <13:18> = dest
        Type <13:26> = "str"
      FunParam <13:31>
        Id <13:32> = src
        Type <13:39> = "str"
      FunParam <13:44>
        Id <13:45> = count
        Type <13:54> = "int"
    Type <13:62> = "str"
  Fun <15:1> :: (str str) -> str
    Id <15:5> = __c:strcat
    FunParams <15:16>
      FunParam <15:16>
        Id <15:17> = dest
        Type <15:25> = "str"
      FunParam <15:30>
        Id <15:31> = src
        Type <15:38> = "str"
    Type <15:46> = "str"
  Fun <17:1> :: (str str int) -> str
    Id <17:5> = __c:strncat
    FunParams <17:17>
      FunParam <17:17>
        Id <17:18> = dest
        Type <17:26> = "str"
      FunParam <17:31>
        Id <17:32> = src
        Type <17:39> = "str"
      FunParam <17:44>
        Id <17:45> = count
        Type <17:54> = "int"
    Type <17:62> = "str"
  Fun <19:1> :: (str str) -> int
    Id <19:5> = __c:strcmp
    FunParams <19:16>
      FunParam <19:16>
        Id <19:17> = dest
        Type <19:25> = "str"
      FunParam <19:30>
        Id <19:31> = src
        Type <19:38> = "str"
    Type <19:46> = "int"
  Fun <21:1> :: (str str int) -> int
    Id <21:5> = __c:strncmp
    FunParams <21:17>
      FunParam <21:17>
        Id <21:18> = dest
        Type <21:26> = "str"
      FunParam <21:31>
        Id <21:32> = src
        Type <21:39> = "str"
      FunParam <21:44>
        Id <21:45> = count
        Type <21:54> = "int"
    Type <21:62> = "int"
  Fun <23:1> :: (str int) -> ()
    Id <23:5> = __c:printf
    FunParams <23:16>
      FunParam <23:16>
        Id <23:17> = fmt
        Type <23:24> = "str"
      FunParam <23:29>
        Id <23:30> = num
        Type <23:37> = "int"
    Type <23:46> = "()"
  Fun <24:1> :: (str) -> ()
    Id <24:5> = printl
    FunParams <24:12>
      FunParam <24:12>
        Id <24:13> = msg
        Type <24:20> = "str"
    Type <24:29> = "()"
    Seq <24:31> :: ()
      Call <25:5> :: ()
        Id <25:5> = __c:puts
        CallParams <25:14>
          CallParam <25:14>
            Id <25:14> = msg :: str
  Fun <27:1> :: (int) -> ()
    Id <27:5> = intprintl
    FunParams <27:15>
      FunParam <27:15>
        Id <27:16> = num
        Type <27:23> = "int"
    Type <27:32> = "()"
    Seq <27:34> :: ()
      Call <28:5> :: ()
        Id <28:5> = __c:printf
        CallParams <28:16>
          CallParam <28:16>
            StrLit <28:16> = "%d\n" :: str
          CallParam <28:23>
            Id <28:23> = num :: int
  Fun <29:1> :: (int int) -> int
    Id <29:6> = <=
    FunParams <29:8>
      FunParam <29:8>
        Id <29:9> = a
        Type <29:14> = "int"
      FunParam <29:19>
        Id <29:20> = b
        Type <29:25> = "int"
    Type <29:33> = "int"
  Fun <31:1> :: (int int) -> int
    Id <31:5> = +
    FunParams <31:7>
      FunParam <31:7>
        Id <31:8> = a
        Type <31:13> = "int"
      FunParam <31:18>
        Id <31:19> = b
        Type <31:24> = "int"
    Type <31:32> = "int"
  Fun <33:1> :: (int int) -> int
    Id <33:5> = -
    FunParams <33:7>
      FunParam <33:7>
        Id <33:8> = a
        Type <33:13> = "int"
      FunParam <33:18>
        Id <33:19> = b
        Type <33:24> = "int"
    Type <33:32> = "int"
